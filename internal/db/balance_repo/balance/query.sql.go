// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package nodeart_balance

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBalance = `-- name: AddBalance :one
INSERT INTO balance (
    user_id, balance, email
) VALUES (
             $1, $2, $3
         )
RETURNING balance_id, user_id, balance, email
`

type AddBalanceParams struct {
	UserID  pgtype.Int4
	Balance pgtype.Float8
	Email   string
}

func (q *Queries) AddBalance(ctx context.Context, arg AddBalanceParams) (Balance, error) {
	row := q.db.QueryRow(ctx, addBalance, arg.UserID, arg.Balance, arg.Email)
	var i Balance
	err := row.Scan(
		&i.BalanceID,
		&i.UserID,
		&i.Balance,
		&i.Email,
	)
	return i, err
}

const getBalance = `-- name: GetBalance :one
SELECT balance.balance FROM balance
WHERE email = $1 OR user_id = $2 LIMIT 1
`

type GetBalanceParams struct {
	Email  string
	UserID pgtype.Int4
}

func (q *Queries) GetBalance(ctx context.Context, arg GetBalanceParams) (pgtype.Float8, error) {
	row := q.db.QueryRow(ctx, getBalance, arg.Email, arg.UserID)
	var balance pgtype.Float8
	err := row.Scan(&balance)
	return balance, err
}

const subBalance = `-- name: SubBalance :exec
UPDATE balance
SET balance = balance - $1
WHERE balance > $1 AND email = $2 OR user_id = $3
RETURNING balance
`

type SubBalanceParams struct {
	Balance pgtype.Float8
	Email   string
	UserID  pgtype.Int4
}

func (q *Queries) SubBalance(ctx context.Context, arg SubBalanceParams) error {
	_, err := q.db.Exec(ctx, subBalance, arg.Balance, arg.Email, arg.UserID)
	return err
}

const updateBalance = `-- name: UpdateBalance :exec
UPDATE balance
    SET balance = balance + $1
WHERE email = $2 OR user_id = $3
`

type UpdateBalanceParams struct {
	Balance pgtype.Float8
	Email   string
	UserID  pgtype.Int4
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) error {
	_, err := q.db.Exec(ctx, updateBalance, arg.Balance, arg.Email, arg.UserID)
	return err
}

const updateWithNewValueBalance = `-- name: UpdateWithNewValueBalance :exec
UPDATE balance
SET balance = $1
WHERE email = $2 OR user_id = $3
`

type UpdateWithNewValueBalanceParams struct {
	Balance pgtype.Float8
	Email   string
	UserID  pgtype.Int4
}

func (q *Queries) UpdateWithNewValueBalance(ctx context.Context, arg UpdateWithNewValueBalanceParams) error {
	_, err := q.db.Exec(ctx, updateWithNewValueBalance, arg.Balance, arg.Email, arg.UserID)
	return err
}
