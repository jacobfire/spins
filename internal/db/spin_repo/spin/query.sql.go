// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package nodeart_spin

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addSpin = `-- name: AddSpin :one
INSERT INTO spin (
    user_id, combination, email, created_at
) VALUES (
             $1, $2, $3, now()
         )
RETURNING spin_id, user_id, combination, created_at, email
`

type AddSpinParams struct {
	UserID      pgtype.Int4
	Combination pgtype.Text
	Email       string
}

func (q *Queries) AddSpin(ctx context.Context, arg AddSpinParams) (Spin, error) {
	row := q.db.QueryRow(ctx, addSpin, arg.UserID, arg.Combination, arg.Email)
	var i Spin
	err := row.Scan(
		&i.SpinID,
		&i.UserID,
		&i.Combination,
		&i.CreatedAt,
		&i.Email,
	)
	return i, err
}

const getSpinHistory = `-- name: GetSpinHistory :many
SELECT spin_id, user_id, combination, created_at, email FROM spin
WHERE email = $1 OR user_id = $2
`

type GetSpinHistoryParams struct {
	Email  string
	UserID pgtype.Int4
}

func (q *Queries) GetSpinHistory(ctx context.Context, arg GetSpinHistoryParams) ([]Spin, error) {
	rows, err := q.db.Query(ctx, getSpinHistory, arg.Email, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Spin
	for rows.Next() {
		var i Spin
		if err := rows.Scan(
			&i.SpinID,
			&i.UserID,
			&i.Combination,
			&i.CreatedAt,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
